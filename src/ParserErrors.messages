expr_eof: BOX TBOX
##
## Ends in an error in state: 34.
##
## expr -> BOX . parceled_expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## BOX
##

Boxed expression is expected

expr_eof: FST TBOX
##
## Ends in an error in state: 31.
##
## expr -> FST . parceled_expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## FST
##

An expression after fst is expected. This primitive can be only used fully applied.

expr_eof: FUN IDR COLON LPAREN SND
##
## Ends in an error in state: 19.
##
## typ -> LPAREN . typ RPAREN [ RPAREN EOF DARROW CROSS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Valid type is expected after opening parenthesis

expr_eof: FUN IDR COLON LPAREN UNIT UNIT
##
## Ends in an error in state: 21.
##
## typ -> typ . CROSS typ [ RPAREN CROSS ARROW ]
## typ -> typ . ARROW typ [ RPAREN CROSS ARROW ]
## typ -> LPAREN typ . RPAREN [ RPAREN EOF DARROW CROSS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN typ
##

Missing closing parenthesis at type level. Or unexpected lexeme, like => is used instead of ->. Or you are using (A, B) instead of A * B

expr_eof: FUN IDR COLON SND
##
## Ends in an error in state: 40.
##
## expr -> FUN IDR COLON . typ DARROW expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## FUN IDR COLON
##

Valid type expected. Make sure uninterpreted type identifiers are capitalized and there are no unbalanced parentheses

expr_eof: FUN IDR COLON TBOX SND
##
## Ends in an error in state: 18.
##
## typ -> TBOX . typ [ RPAREN EOF DARROW CROSS ARROW ]
##
## The known suffix of the stack is as follows:
## TBOX
##

Type-level box must be followed by a type

expr_eof: FUN IDR COLON UNIT ARROW SND
##
## Ends in an error in state: 25.
##
## typ -> typ ARROW . typ [ RPAREN EOF DARROW CROSS ARROW ]
##
## The known suffix of the stack is as follows:
## typ ARROW
##

Valid codomain type is expected. Sometimes this happens if -> is used instead of =>

expr_eof: FUN IDR COLON UNIT ARROW UNIT UNIT
##
## Ends in an error in state: 26.
##
## typ -> typ . CROSS typ [ RPAREN EOF DARROW CROSS ARROW ]
## typ -> typ . ARROW typ [ RPAREN EOF DARROW CROSS ARROW ]
## typ -> typ ARROW typ . [ RPAREN EOF DARROW CROSS ARROW ]
##
## The known suffix of the stack is as follows:
## typ ARROW typ
##

Please report your example, producing this parsing error

expr_eof: FUN IDR COLON UNIT CROSS SND
##
## Ends in an error in state: 23.
##
## typ -> typ CROSS . typ [ RPAREN EOF DARROW CROSS ARROW ]
##
## The known suffix of the stack is as follows:
## typ CROSS
##

Second component of product type is expected

expr_eof: FUN IDR COLON UNIT DARROW TBOX
##
## Ends in an error in state: 42.
##
## expr -> FUN IDR COLON typ DARROW . expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## FUN IDR COLON typ DARROW
##

Error when parsing lambda function body: missing body or unexpected lexeme

expr_eof: FUN IDR COLON UNIT UNIT
##
## Ends in an error in state: 41.
##
## expr -> FUN IDR COLON typ . DARROW expr [ RPAREN RANGLE IN EOF COMMA ]
## typ -> typ . CROSS typ [ DARROW CROSS ARROW ]
## typ -> typ . ARROW typ [ DARROW CROSS ARROW ]
##
## The known suffix of the stack is as follows:
## FUN IDR COLON typ
##

Separator between bound variable and lambda body is missing. Use e.g. => or . Also, make sure parentheses are balanced

expr_eof: FUN IDR UNIT
##
## Ends in an error in state: 39.
##
## expr -> FUN IDR . COLON typ DARROW expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## FUN IDR
##

Function parameter is missing type annotation

expr_eof: FUN UNIT
##
## Ends in an error in state: 13.
##
## expr -> FUN . IDR COLON typ DARROW expr [ RPAREN RANGLE IN EOF COMMA ]
## expr -> FUN . LPAREN IDR COLON typ RPAREN DARROW expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## FUN
##

A regular identifier expected. This happens, when e.g. a modal identifier is used fun x' : T. ...

expr_eof: LANGLE TBOX
##
## Ends in an error in state: 10.
##
## parceled_expr -> LANGLE . expr COMMA expr RANGLE [ UNIT RPAREN RANGLE LPAREN LANGLE IN IDR IDM EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LANGLE
##

First component of pair expression is expected

expr_eof: LANGLE UNIT COMMA TBOX
##
## Ends in an error in state: 45.
##
## parceled_expr -> LANGLE expr COMMA . expr RANGLE [ UNIT RPAREN RANGLE LPAREN LANGLE IN IDR IDM EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LANGLE expr COMMA
##

Second component of pair expression is expected

expr_eof: LANGLE UNIT COMMA UNIT RPAREN
##
## Ends in an error in state: 46.
##
## parceled_expr -> LANGLE expr COMMA expr . RANGLE [ UNIT RPAREN RANGLE LPAREN LANGLE IN IDR IDM EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LANGLE expr COMMA expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 36, spurious reduction of production expr -> parceled_expr 
##

Right angle bracket is expected

expr_eof: LANGLE UNIT RPAREN
##
## Ends in an error in state: 44.
##
## parceled_expr -> LANGLE expr . COMMA expr RANGLE [ UNIT RPAREN RANGLE LPAREN LANGLE IN IDR IDM EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LANGLE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 36, spurious reduction of production expr -> parceled_expr 
##

Missing comma which separates components of pair expression

expr_eof: LETBOX IDM EQ TBOX
##
## Ends in an error in state: 6.
##
## expr -> LETBOX IDM EQ . expr IN expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LETBOX IDM EQ
##

Right-hand side of lexbox expression is expected

expr_eof: LETBOX IDM EQ UNIT IN TBOX
##
## Ends in an error in state: 52.
##
## expr -> LETBOX IDM EQ expr IN . expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LETBOX IDM EQ expr IN
##

Body of letbox expression is expected

expr_eof: LETBOX IDM EQ UNIT RPAREN
##
## Ends in an error in state: 51.
##
## expr -> LETBOX IDM EQ expr . IN expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LETBOX IDM EQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 36, spurious reduction of production expr -> parceled_expr 
##

Missing "in" keyword in letbox expression

expr_eof: LETBOX IDM UNIT
##
## Ends in an error in state: 5.
##
## expr -> LETBOX IDM . EQ expr IN expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LETBOX IDM
##

Missing "=" after identifier in letbox expression

expr_eof: LETBOX UNIT
##
## Ends in an error in state: 4.
##
## expr -> LETBOX . IDM EQ expr IN expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LETBOX
##

A modal identifier is expected. It should start with a lowercase letter and end with an apostrophe (').

expr_eof: LPAREN TBOX
##
## Ends in an error in state: 3.
##
## parceled_expr -> LPAREN . expr RPAREN [ UNIT RPAREN RANGLE LPAREN LANGLE IN IDR IDM EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Missing or unexpected lexeme in parenthesized expression

expr_eof: LPAREN UNIT RANGLE
##
## Ends in an error in state: 54.
##
## parceled_expr -> LPAREN expr . RPAREN [ UNIT RPAREN RANGLE LPAREN LANGLE IN IDR IDM EOF COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 36, spurious reduction of production expr -> parceled_expr 
##

Missing closing parenthesis or missing obligatory parentheses for multi-arg function application: (f x) y or maybe using parentheses instead of angle brackets for pairs

expr_eof: SND TBOX
##
## Ends in an error in state: 2.
##
## expr -> SND . parceled_expr [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## SND
##

An expression after snd is expected. This primitive can be only used fully applied.

expr_eof: TBOX
##
## Ends in an error in state: 0.
##
## expr_eof' -> . expr_eof [ # ]
##
## The known suffix of the stack is as follows:
##
##

An expression is expected. This may result from a missing or unexpected lexeme or an attempt to parse a type-level expression

expr_eof: UNIT RPAREN
##
## Ends in an error in state: 58.
##
## expr_eof -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 36, spurious reduction of production expr -> parceled_expr 
##

Binary application must be parenthesized like so: (f x) y

expr_eof: UNIT TBOX
##
## Ends in an error in state: 36.
##
## expr -> parceled_expr . parceled_expr [ RPAREN RANGLE IN EOF COMMA ]
## expr -> parceled_expr . [ RPAREN RANGLE IN EOF COMMA ]
##
## The known suffix of the stack is as follows:
## parceled_expr
##

Sometimes this happens when you say "let box" instead of "letbox" or try to apply a function to "box"